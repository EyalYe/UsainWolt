package Server.Models;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

public class RestaurantUser extends User {
    private List<Order> orders; // List of orders associated with the restaurant
    private List<Order.Item> menu; // List of menu items available at the restaurant
    private String businessPhoneNumber; // Business phone number for the restaurant
    private String cuisine; // Type of cuisine offered by the restaurant
    private double revenue; // Total revenue generated by the restaurant
    private boolean hasProfilePicture; // Flag indicating if the restaurant has a profile picture
    private String profilePictureUrl; // URL to the restaurant's profile picture
    private String restaurantName; // Name of the restaurant


    // Constructor for creating a RestaurantUser with all required fields
    public RestaurantUser(String userName, String hashedPassword, String address, String phoneNumber, String email, String businessPhoneNumber, String cuisine, double revenue) {
        super(userName, hashedPassword, address, phoneNumber, email);
        this.orders = new ArrayList<>();
        this.menu = new ArrayList<>();
        this.businessPhoneNumber = businessPhoneNumber;
        this.cuisine = cuisine;
        this.revenue = revenue;
        this.hasProfilePicture = false;
        this.profilePictureUrl = "";
        this.restaurantName = this.getUserName().replaceAll("([A-Z])", " $1").trim();

    }

    // Constructor to create RestaurantUser from CSV line
    public RestaurantUser(String csvLine) {
        super(csvLine);
        int index = 8;
        String[] fields = csvLine.split(",");
        this.businessPhoneNumber = fields[index++];
        this.cuisine = fields[index++];
        try {
            this.revenue = Double.parseDouble(fields[index++]);
        } catch (NumberFormatException e) {
            this.revenue = 0.0;
        }
        this.hasProfilePicture = Boolean.parseBoolean(fields[index++]);

        // Check if profile picture exists
        try {
            File profilePicture = new File("profile_pictures/" + this.getUserName() + ".jpg");
            if (!profilePicture.exists()) {
                this.hasProfilePicture = false;
            } else {
                this.profilePictureUrl = "profile_pictures/" + this.getUserName() + ".jpg";
                this.hasProfilePicture = true;
            }
        } catch (Exception e) {
            this.hasProfilePicture = false;
        }
        this.restaurantName = fields[index];

        this.orders = new ArrayList<>();
        this.menu = new ArrayList<>();

    }


    // Getters and Setters

    public List<Order> getOrders() {
        return new ArrayList<>(orders);
    }

    public String getProfilePictureUrl() {
        return profilePictureUrl;
    }

    public void setOrders(List<Order> orders) {
        this.orders = new ArrayList<>(orders);
    }

    public List<Order.Item> getMenu() {
        return new ArrayList<>(menu);
    }

    public void setMenu(List<Order.Item> menu) {
        this.menu = new ArrayList<>(menu);
    }

    public String getBusinessPhoneNumber() {
        return businessPhoneNumber;
    }

    public void setBusinessPhoneNumber(String businessPhoneNumber) {
        this.businessPhoneNumber = businessPhoneNumber;
    }

    public String getCuisine() {
        return cuisine;
    }

    public void setCuisine(String cuisine) {
        this.cuisine = cuisine;
    }

    public double getRevenue() {
        return revenue;
    }

    public void setRevenue(double revenue) {
        this.revenue = revenue;
    }

    public boolean hasProfilePicture() {
        return hasProfilePicture;
    }

    public void setProfilePicture(byte[] hasProfilePicture) {
        this.hasProfilePicture = true;
        this.profilePictureUrl = "profile_pictures/" + this.getUserName() + ".jpg";
    }

    @Override
    public void performUserSpecificAction() {
        // Implementation for restaurant-specific action
        System.out.println("Performing restaurant-specific action...");
    }

    // Additional methods specific to RestaurantUser

    // Adds a new item to the restaurant's menu
    public void addMenuItem(String itemName, double price) {
        if (itemName == null || itemName.isEmpty()) {
            throw new IllegalArgumentException("Item name cannot be null or empty");
        }
        Order.Item item = new Order.Item(itemName, price);
        menu.add(item);
    }

    // Adds a new item to the restaurant's menu
    public void addMenuItem(Order.Item item) {
        menu.add(item);
    }

    // Removes an item from the restaurant's menu by name
    public void removeMenuItem(String itemName) {
        menu.removeIf(item -> item.getName().equals(itemName));
    }

    // Disables an item on the menu by name
    public void disableMenuItem(String menuItemName) {
        for (Order.Item item : menu) {
            if (item.getName().equals(menuItemName)) {
                item.setAvailable(false);
                break;
            }
        }
    }

    // Enables an item on the menu by name
    public void enableMenuItem(String menuItemName) {
        for (Order.Item item : menu) {
            if (item.getName().equals(menuItemName)) {
                item.setAvailable(true);
                break;
            }
        }
    }

    // Disables all items on the menu
    public void disableAllMenuItems() {
        for (Order.Item item : menu) {
            item.setAvailable(false);
        }
    }

    // Adds an order to the restaurant's list of orders
    public void addOrder(Order order) {
        orders.add(order);
    }

    // Removes an order from the restaurant's list of orders by ID
    public void removeOrder(int orderId) {
        orders.removeIf(order -> order.getOrderId() == orderId);
    }

    // Gets the current list of orders
    public List<Order> getCurrentOrders() {
        return orders;
    }

    @Override
    public String toString() {
        // Return a string representation of the restaurant user
        return "Restaurant," + super.toString() + "," + businessPhoneNumber + "," + cuisine + "," + revenue + "," + hasProfilePicture + "," + restaurantName;
    }

    // Adds revenue to the restaurant's total revenue
    public void addRevenue(double totalPrice) {
        revenue += totalPrice;
    }

    public void setRestaurantName(String value) {
        this.restaurantName = value;
    }

    public Object getRestaurantName() {
        return restaurantName;
    }

    public void setRestaurantActualName(String value) {
        this.restaurantName = value;
    }
}
